#!/usr/bin/perl

#******************************************************************************
# collect shifts from demon outputs
#   usage:  getshifts-demon reference basename; rdb file fragments to stdout
#******************************************************************************

sub numerically { $a <=> $b; }

@ARGV == 2 or die " usage: getshifts-demon reference basename \n";
$reference = "$ARGV[0]";
$basename = "$ARGV[1]";
$fulltensor=1;

if( $reference eq "seg0" ){
   $reference_set = "OLYP seg0 ";
   $ref{"H"} = 33.3;   # A2 H shifts (no H1/H3)
   $ref{"C"} = 182.5;  # A2 C shifts
   $ref{"N"} = 245.9;  # 1d3z1 N shifts"
   $ref{"P"} = 300.0;
   $ref{"S"} = 0.0;
   $ref{"F"} = 131.33;
} elsif( $reference eq "mseg2" ){
   $reference_set = "OLYP mseg2 ";
   $ref{"H"} = 31.3;   # A2 H shifts (no H1/H3)
   $ref{"C"} = 178.1;  # A2 C shifts
   $ref{"N"} = 233.8;  # 1d3z1 N shifts 
   $ref{"P"} = 300.0;
   $ref{"S"} = 0.0;
   $ref{"F"} = 131.33;
}

if( $basename eq "header" ){
   # document the reference shieldings being used:
   printf( "# results from afnmr-demon:\n" );
   printf( "# reference shieldings used for H,C,N,P,F: %6.2f %6.2f %6.2f %6.2f %6.2f %s\n",
       $ref{"H"}, $ref{"C"}, $ref{"N"}, $ref{"P"}, $ref{"F"}, $reference_set );

   if( $fulltensor ){
      printf("res\tatomname\tresname\tshift\txx\txy\txz\tyx\tyy\tyz\tzx\tzy\tzz\n");
      printf( "8N\t8\t8\t10N\t10N\t10N\t10N\t10N\t10N\t10N\t10N\t10N\t10N\n" );
   } else {
      printf( "res\tatomname\tresname\tshift\tdelta\teta\td11\td22\td33\n" );
      printf( "8N\t8\t8\t10N\t10N\t10N\t10N\t10N\t10N\n" );
   }

   exit(0);
}

# get atom and residue names from pqr file:

open (PQR, "<", "$basename". ".pqr") or die "cannot open $basename.pqr";
$iat = 0;
while (<PQR>) {
	next unless m/^ATOM  /; 
    @f = split( ' ', $_ );
	$iat++; $aname[$iat] = $f[2]; $rname[$iat] = $f[3]; $res[$iat] = $f[4];
	$rname[$iat] =~ s/^([ACTGU])[35]$/$1/;  # fix 3',5' ends of nucleic acids
}
close PQR;

# read in the shift data

open (OUT, "<", "$basename" . ".out") or die "cannot open $basename.out";
$sys = substr( $basename, 0, length( $basename ) -3 );

while ($_ = <OUT>) {

   if (m/CHEMICAL SHIELDING FOR/) {

       @f = split( ' ', $_ ); $iat = $f[4]; $elem = substr($f[6],0,1);
       next if $elem eq "O";  next if $rname[$iat] eq "MOD";
       <OUT>; <OUT>; <OUT>; <OUT>; 

       #  get full shift tensor:
       $_ = <OUT>; @f = split( ' ', $_ ); 
       $sxx=$ref{$elem}-$f[1]; $sxy=$ref{$elem}-$f[2]; $sxz=$ref{$elem}-$f[3];

       $_ = <OUT>; @f = split( ' ', $_ ); 
       $syx=$ref{$elem}-$f[1]; $syy=$ref{$elem}-$f[2]; $syz=$ref{$elem}-$f[3];

       $_ = <OUT>; @f = split( ' ', $_ ); 
       $szx=$ref{$elem}-$f[1]; $szy=$ref{$elem}-$f[2]; $szz=$ref{$elem}-$f[3];

       #  grab and print the isotropic shift:
       <OUT>; <OUT>; <OUT>; $_ = <OUT>; @f = split( ' ', $_ ); 
       $diso = $ref{$elem} - $f[3];

       #  get the principal shieldings:
       <OUT>; <OUT>; $_ = <OUT>; @f = split( ' ', $_ ); 
       $d11=$ref{$elem} - $f[0]; 
       $d22=$ref{$elem} - $f[1]; 
       $d33=$ref{$elem} - $f[2]; 

       @eigv = sort numerically $d11,$d22,$d33;
       if( abs($diso - $eigv[0]) > abs($diso - $eigv[2]) ){
          $delta  = -$diso + $eigv[0];  $eta = ($eigv[1]-$eigv[2])/$delta;
       } else {
          $delta  = -$diso + $eigv[2];  $eta = ($eigv[1]-$eigv[0])/$delta;
       }

       if( $fulltensor ){
          printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\n", 
            $res[$iat],$aname[$iat],$rname[$iat],$diso,$sxx,$sxy,$sxz,
            $syx,$syy,$syz,$szx,$szy,$szz;
       } else {
          printf "%d\t%s\t%s\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\t%8.3f\n", 
             $res[$iat],$aname[$iat],$rname[$iat],$diso, $delta, $eta,
             $d11, $d22, $d33;
       }

   }
}
close OUT;
